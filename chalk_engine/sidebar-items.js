initSidebarItems({"enum":[["AnswerMode",""],["Literal","Either `A` or `~A`, where `A` is a `Env |- Goal`."]],"macro":[["index_struct",""]],"mod":[["context","Defines traits used to embed the chalk-engine in another crate."],["derived",""],["forest",""],["logic",""],["simplify",""],["stack",""],["strand",""],["table",""],["tables",""]],"struct":[["Answer","An \"answer\" in the on-demand solver corresponds to a fully solved goal for a particular table (modulo delayed literals). It contains a substitution"],["CompleteAnswer",""],["ExClause","The paper describes these as `A :- D | G`."],["FlounderedSubgoal","A \"floundered\" subgoal is one that contains unbound existential variables for which it cannot produce a value. The classic example of floundering is a negative subgoal:"],["Minimums","The `Minimums` structure is used to track the dependencies between some item E on the evaluation stack. In particular, it tracks cases where the success of E depends (or may depend) on items deeper in the stack than E (i.e., with lower DFNs)."],["TableIndex",""],["TimeStamp","The \"time stamp\" is a simple clock that gets incremented each time we encounter a positive answer in processing a particular strand. This is used as an optimization to help us figure out when we may have changed inference variables."]]});